/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssociatedLabel', 'model/DeviceChannel', 'model/DeviceModelManifest', 'model/DevicePersonalizedInfo', 'model/Invitation', 'model/JsonObject', 'model/PackageDef', 'model/PlacesHints', 'model/Room', 'model/StateDef'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AssociatedLabel'), require('./DeviceChannel'), require('./DeviceModelManifest'), require('./DevicePersonalizedInfo'), require('./Invitation'), require('./JsonObject'), require('./PackageDef'), require('./PlacesHints'), require('./Room'), require('./StateDef'));
  } else {
    // Browser globals (root is window)
    if (!root.WeaviateApi) {
      root.WeaviateApi = {};
    }
    root.WeaviateApi.Device = factory(root.WeaviateApi.ApiClient, root.WeaviateApi.AssociatedLabel, root.WeaviateApi.DeviceChannel, root.WeaviateApi.DeviceModelManifest, root.WeaviateApi.DevicePersonalizedInfo, root.WeaviateApi.Invitation, root.WeaviateApi.JsonObject, root.WeaviateApi.PackageDef, root.WeaviateApi.PlacesHints, root.WeaviateApi.Room, root.WeaviateApi.StateDef);
  }
}(this, function(ApiClient, AssociatedLabel, DeviceChannel, DeviceModelManifest, DevicePersonalizedInfo, Invitation, JsonObject, PackageDef, PlacesHints, Room, StateDef) {
  'use strict';




  /**
   * The Device model module.
   * @module model/Device
   * @version v1-alpha
   */

  /**
   * Constructs a new <code>Device</code>.
   * @alias module:model/Device
   * @class
   */
  var exports = function() {
    var _this = this;



































  };

  /**
   * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Device} obj Optional instance to populate.
   * @return {module:model/Device} The populated <code>Device</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('adapterId')) {
        obj['adapterId'] = ApiClient.convertToType(data['adapterId'], 'String');
      }
      if (data.hasOwnProperty('certFingerprint')) {
        obj['certFingerprint'] = ApiClient.convertToType(data['certFingerprint'], 'String');
      }
      if (data.hasOwnProperty('channel')) {
        obj['channel'] = DeviceChannel.constructFromObject(data['channel']);
      }
      if (data.hasOwnProperty('commandDefs')) {
        obj['commandDefs'] = ApiClient.convertToType(data['commandDefs'], {'String': PackageDef});
      }
      if (data.hasOwnProperty('components')) {
        obj['components'] = JsonObject.constructFromObject(data['components']);
      }
      if (data.hasOwnProperty('connectionStatus')) {
        obj['connectionStatus'] = ApiClient.convertToType(data['connectionStatus'], 'String');
      }
      if (data.hasOwnProperty('creationTimeMs')) {
        obj['creationTimeMs'] = ApiClient.convertToType(data['creationTimeMs'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('deviceKind')) {
        obj['deviceKind'] = ApiClient.convertToType(data['deviceKind'], 'String');
      }
      if (data.hasOwnProperty('deviceLocalId')) {
        obj['deviceLocalId'] = ApiClient.convertToType(data['deviceLocalId'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('invitations')) {
        obj['invitations'] = ApiClient.convertToType(data['invitations'], [Invitation]);
      }
      if (data.hasOwnProperty('isEventRecordingDisabled')) {
        obj['isEventRecordingDisabled'] = ApiClient.convertToType(data['isEventRecordingDisabled'], 'Boolean');
      }
      if (data.hasOwnProperty('kind')) {
        obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
      }
      if (data.hasOwnProperty('labels')) {
        obj['labels'] = ApiClient.convertToType(data['labels'], [AssociatedLabel]);
      }
      if (data.hasOwnProperty('lastSeenTimeMs')) {
        obj['lastSeenTimeMs'] = ApiClient.convertToType(data['lastSeenTimeMs'], 'String');
      }
      if (data.hasOwnProperty('lastUpdateTimeMs')) {
        obj['lastUpdateTimeMs'] = ApiClient.convertToType(data['lastUpdateTimeMs'], 'String');
      }
      if (data.hasOwnProperty('lastUseTimeMs')) {
        obj['lastUseTimeMs'] = ApiClient.convertToType(data['lastUseTimeMs'], 'String');
      }
      if (data.hasOwnProperty('location')) {
        obj['location'] = ApiClient.convertToType(data['location'], 'String');
      }
      if (data.hasOwnProperty('modelManifest')) {
        obj['modelManifest'] = DeviceModelManifest.constructFromObject(data['modelManifest']);
      }
      if (data.hasOwnProperty('modelManifestId')) {
        obj['modelManifestId'] = ApiClient.convertToType(data['modelManifestId'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('nicknames')) {
        obj['nicknames'] = ApiClient.convertToType(data['nicknames'], ['String']);
      }
      if (data.hasOwnProperty('owner')) {
        obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
      }
      if (data.hasOwnProperty('personalizedInfo')) {
        obj['personalizedInfo'] = DevicePersonalizedInfo.constructFromObject(data['personalizedInfo']);
      }
      if (data.hasOwnProperty('placeId')) {
        obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
      }
      if (data.hasOwnProperty('placesHints')) {
        obj['placesHints'] = PlacesHints.constructFromObject(data['placesHints']);
      }
      if (data.hasOwnProperty('room')) {
        obj['room'] = Room.constructFromObject(data['room']);
      }
      if (data.hasOwnProperty('serialNumber')) {
        obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = JsonObject.constructFromObject(data['state']);
      }
      if (data.hasOwnProperty('stateDefs')) {
        obj['stateDefs'] = ApiClient.convertToType(data['stateDefs'], {'String': StateDef});
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
      }
      if (data.hasOwnProperty('traits')) {
        obj['traits'] = JsonObject.constructFromObject(data['traits']);
      }
      if (data.hasOwnProperty('uiDeviceKind')) {
        obj['uiDeviceKind'] = ApiClient.convertToType(data['uiDeviceKind'], 'String');
      }
    }
    return obj;
  }

  /**
   * ID of the adapter that created this device.
   * @member {String} adapterId
   */
  exports.prototype['adapterId'] = undefined;
  /**
   * Deprecated, do not use. The HTTPS certificate fingerprint used to secure communication with device..
   * @member {String} certFingerprint
   */
  exports.prototype['certFingerprint'] = undefined;
  /**
   * @member {module:model/DeviceChannel} channel
   */
  exports.prototype['channel'] = undefined;
  /**
   * Deprecated, use \"traits\" instead. Description of commands supported by the device. This field is writable only by devices.
   * @member {Object.<String, module:model/PackageDef>} commandDefs
   */
  exports.prototype['commandDefs'] = undefined;
  /**
   * @member {module:model/JsonObject} components
   */
  exports.prototype['components'] = undefined;
  /**
   * Device connection status.
   * @member {String} connectionStatus
   */
  exports.prototype['connectionStatus'] = undefined;
  /**
   * Timestamp of creation of this device in milliseconds since epoch UTC.
   * @member {String} creationTimeMs
   */
  exports.prototype['creationTimeMs'] = undefined;
  /**
   * User readable description of this device.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Device kind. Deprecated, provide \"modelManifestId\" instead. See list of device kinds values.
   * @member {String} deviceKind
   */
  exports.prototype['deviceKind'] = undefined;
  /**
   * Deprecated, do not use. The ID of the device for use on the local network.
   * @member {String} deviceLocalId
   */
  exports.prototype['deviceLocalId'] = undefined;
  /**
   * Unique device ID.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * List of pending invitations for the currently logged-in user.
   * @member {Array.<module:model/Invitation>} invitations
   */
  exports.prototype['invitations'] = undefined;
  /**
   * Indicates whether event recording is enabled or disabled for this device.
   * @member {Boolean} isEventRecordingDisabled
   */
  exports.prototype['isEventRecordingDisabled'] = undefined;
  /**
   * Identifies what kind of resource this is. Value: the fixed string \"weave#device\".
   * @member {String} kind
   * @default 'weave#device'
   */
  exports.prototype['kind'] = 'weave#device';
  /**
   * Any labels attached to the device. Use the addLabel and removeLabel APIs to modify this list.
   * @member {Array.<module:model/AssociatedLabel>} labels
   */
  exports.prototype['labels'] = undefined;
  /**
   * Timestamp of the last request from this device in milliseconds since epoch UTC. Supported only for devices with XMPP channel type.
   * @member {String} lastSeenTimeMs
   */
  exports.prototype['lastSeenTimeMs'] = undefined;
  /**
   * Timestamp of the last device update in milliseconds since epoch UTC.
   * @member {String} lastUpdateTimeMs
   */
  exports.prototype['lastUpdateTimeMs'] = undefined;
  /**
   * Timestamp of the last device usage in milliseconds since epoch UTC.
   * @member {String} lastUseTimeMs
   */
  exports.prototype['lastUseTimeMs'] = undefined;
  /**
   * Deprecated, do not use. User readable location of the device (name of the room, office number, building/floor, etc).
   * @member {String} location
   */
  exports.prototype['location'] = undefined;
  /**
   * @member {module:model/DeviceModelManifest} modelManifest
   */
  exports.prototype['modelManifest'] = undefined;
  /**
   * Model manifest ID of this device.
   * @member {String} modelManifestId
   */
  exports.prototype['modelManifestId'] = undefined;
  /**
   * Name of this device provided by the manufacturer.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Nicknames of the device. Use the addNickname and removeNickname APIs to modify this list.
   * @member {Array.<String>} nicknames
   */
  exports.prototype['nicknames'] = undefined;
  /**
   * E-mail address of the device owner.
   * @member {String} owner
   */
  exports.prototype['owner'] = undefined;
  /**
   * @member {module:model/DevicePersonalizedInfo} personalizedInfo
   */
  exports.prototype['personalizedInfo'] = undefined;
  /**
   * ID of the place that this device belongs to.
   * @member {String} placeId
   */
  exports.prototype['placeId'] = undefined;
  /**
   * @member {module:model/PlacesHints} placesHints
   */
  exports.prototype['placesHints'] = undefined;
  /**
   * @member {module:model/Room} room
   */
  exports.prototype['room'] = undefined;
  /**
   * Serial number of a device provided by its manufacturer.
   * @member {String} serialNumber
   */
  exports.prototype['serialNumber'] = undefined;
  /**
   * @member {module:model/JsonObject} state
   */
  exports.prototype['state'] = undefined;
  /**
   * Deprecated, do not use. Description of the device state. This field is writable only by devices.
   * @member {Object.<String, module:model/StateDef>} stateDefs
   */
  exports.prototype['stateDefs'] = undefined;
  /**
   * Custom free-form manufacturer tags.
   * @member {Array.<String>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * @member {module:model/JsonObject} traits
   */
  exports.prototype['traits'] = undefined;
  /**
   * Device kind from the model manifest used in UI applications. See list of device kinds values.
   * @member {String} uiDeviceKind
   */
  exports.prototype['uiDeviceKind'] = undefined;



  return exports;
}));


