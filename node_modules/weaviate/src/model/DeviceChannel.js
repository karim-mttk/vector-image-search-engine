/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeviceChannelPubsub'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DeviceChannelPubsub'));
  } else {
    // Browser globals (root is window)
    if (!root.WeaviateApi) {
      root.WeaviateApi = {};
    }
    root.WeaviateApi.DeviceChannel = factory(root.WeaviateApi.ApiClient, root.WeaviateApi.DeviceChannelPubsub);
  }
}(this, function(ApiClient, DeviceChannelPubsub) {
  'use strict';




  /**
   * The DeviceChannel model module.
   * @module model/DeviceChannel
   * @version v1-alpha
   */

  /**
   * Constructs a new <code>DeviceChannel</code>.
   * Device notification channel description.
   * @alias module:model/DeviceChannel
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>DeviceChannel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceChannel} obj Optional instance to populate.
   * @return {module:model/DeviceChannel} The populated <code>DeviceChannel</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('connectionStatusHint')) {
        obj['connectionStatusHint'] = ApiClient.convertToType(data['connectionStatusHint'], 'String');
      }
      if (data.hasOwnProperty('gcmRegistrationId')) {
        obj['gcmRegistrationId'] = ApiClient.convertToType(data['gcmRegistrationId'], 'String');
      }
      if (data.hasOwnProperty('gcmSenderId')) {
        obj['gcmSenderId'] = ApiClient.convertToType(data['gcmSenderId'], 'String');
      }
      if (data.hasOwnProperty('parentId')) {
        obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
      }
      if (data.hasOwnProperty('pubsub')) {
        obj['pubsub'] = DeviceChannelPubsub.constructFromObject(data['pubsub']);
      }
      if (data.hasOwnProperty('supportedType')) {
        obj['supportedType'] = ApiClient.convertToType(data['supportedType'], 'String');
      }
    }
    return obj;
  }

  /**
   * Connection status hint, set by parent device.
   * @member {module:model/DeviceChannel.ConnectionStatusHintEnum} connectionStatusHint
   */
  exports.prototype['connectionStatusHint'] = undefined;
  /**
   * GCM registration ID. Required if device supports GCM delivery channel.
   * @member {String} gcmRegistrationId
   */
  exports.prototype['gcmRegistrationId'] = undefined;
  /**
   * GCM sender ID. For Chrome apps must be the same as sender ID during registration, usually API project ID.
   * @member {String} gcmSenderId
   */
  exports.prototype['gcmSenderId'] = undefined;
  /**
   * Parent device ID (aggregator) if it exists.
   * @member {String} parentId
   */
  exports.prototype['parentId'] = undefined;
  /**
   * @member {module:model/DeviceChannelPubsub} pubsub
   */
  exports.prototype['pubsub'] = undefined;
  /**
   * Channel type supported by device. Allowed types are: \"gcm\", \"xmpp\", \"pubsub\", and \"parent\".
   * @member {String} supportedType
   */
  exports.prototype['supportedType'] = undefined;


  /**
   * Allowed values for the <code>connectionStatusHint</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ConnectionStatusHintEnum = {
    /**
     * value: "offline"
     * @const
     */
    "offline": "offline",
    /**
     * value: "online"
     * @const
     */
    "online": "online",
    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"  };


  return exports;
}));


