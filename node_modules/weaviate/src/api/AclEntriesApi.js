/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AclEntriesListResponse', 'model/AclEntry'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AclEntriesListResponse'), require('../model/AclEntry'));
  } else {
    // Browser globals (root is window)
    if (!root.WeaviateApi) {
      root.WeaviateApi = {};
    }
    root.WeaviateApi.AclEntriesApi = factory(root.WeaviateApi.ApiClient, root.WeaviateApi.AclEntriesListResponse, root.WeaviateApi.AclEntry);
  }
}(this, function(ApiClient, AclEntriesListResponse, AclEntry) {
  'use strict';

  /**
   * AclEntries service.
   * @module api/AclEntriesApi
   * @version v1-alpha
   */

  /**
   * Constructs a new AclEntriesApi. 
   * @alias module:api/AclEntriesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the weaveAclEntriesDelete operation.
     * @callback module:api/AclEntriesApi~weaveAclEntriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an ACL entry.
     * @param {String} deviceId ID of the device to use.
     * @param {String} aclEntryId Unique ACL entry ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/AclEntriesApi~weaveAclEntriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.weaveAclEntriesDelete = function(deviceId, aclEntryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveAclEntriesDelete");
      }

      // verify the required parameter 'aclEntryId' is set
      if (aclEntryId == undefined || aclEntryId == null) {
        throw new Error("Missing the required parameter 'aclEntryId' when calling weaveAclEntriesDelete");
      }


      var pathParams = {
        'deviceId': deviceId,
        'aclEntryId': aclEntryId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{deviceId}/aclEntries/{aclEntryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveAclEntriesGet operation.
     * @callback module:api/AclEntriesApi~weaveAclEntriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AclEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the requested ACL entry.
     * @param {String} deviceId ID of the device to use.
     * @param {String} aclEntryId Unique ACL entry ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/AclEntriesApi~weaveAclEntriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AclEntry}
     */
    this.weaveAclEntriesGet = function(deviceId, aclEntryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveAclEntriesGet");
      }

      // verify the required parameter 'aclEntryId' is set
      if (aclEntryId == undefined || aclEntryId == null) {
        throw new Error("Missing the required parameter 'aclEntryId' when calling weaveAclEntriesGet");
      }


      var pathParams = {
        'deviceId': deviceId,
        'aclEntryId': aclEntryId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = AclEntry;

      return this.apiClient.callApi(
        '/devices/{deviceId}/aclEntries/{aclEntryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveAclEntriesInsert operation.
     * @callback module:api/AclEntriesApi~weaveAclEntriesInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AclEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a new ACL entry.
     * @param {String} deviceId ID of the device to use.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/AclEntry} opts.body 
     * @param {module:api/AclEntriesApi~weaveAclEntriesInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AclEntry}
     */
    this.weaveAclEntriesInsert = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveAclEntriesInsert");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = AclEntry;

      return this.apiClient.callApi(
        '/devices/{deviceId}/aclEntries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveAclEntriesList operation.
     * @callback module:api/AclEntriesApi~weaveAclEntriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AclEntriesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists ACL entries.
     * @param {String} deviceId ID of the device to use.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {Number} opts.maxResults 
     * @param {Number} opts.startIndex 
     * @param {String} opts.token 
     * @param {module:api/AclEntriesApi~weaveAclEntriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AclEntriesListResponse}
     */
    this.weaveAclEntriesList = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveAclEntriesList");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl'],
        'maxResults': opts['maxResults'],
        'startIndex': opts['startIndex'],
        'token': opts['token']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = AclEntriesListResponse;

      return this.apiClient.callApi(
        '/devices/{deviceId}/aclEntries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveAclEntriesPatch operation.
     * @callback module:api/AclEntriesApi~weaveAclEntriesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AclEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an ACL entry. This method supports patch semantics.
     * @param {String} deviceId ID of the device to use.
     * @param {String} aclEntryId Unique ACL entry ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/AclEntry} opts.body 
     * @param {module:api/AclEntriesApi~weaveAclEntriesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AclEntry}
     */
    this.weaveAclEntriesPatch = function(deviceId, aclEntryId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveAclEntriesPatch");
      }

      // verify the required parameter 'aclEntryId' is set
      if (aclEntryId == undefined || aclEntryId == null) {
        throw new Error("Missing the required parameter 'aclEntryId' when calling weaveAclEntriesPatch");
      }


      var pathParams = {
        'deviceId': deviceId,
        'aclEntryId': aclEntryId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = AclEntry;

      return this.apiClient.callApi(
        '/devices/{deviceId}/aclEntries/{aclEntryId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveAclEntriesUpdate operation.
     * @callback module:api/AclEntriesApi~weaveAclEntriesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AclEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an ACL entry.
     * @param {String} deviceId ID of the device to use.
     * @param {String} aclEntryId Unique ACL entry ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/AclEntry} opts.body 
     * @param {module:api/AclEntriesApi~weaveAclEntriesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AclEntry}
     */
    this.weaveAclEntriesUpdate = function(deviceId, aclEntryId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveAclEntriesUpdate");
      }

      // verify the required parameter 'aclEntryId' is set
      if (aclEntryId == undefined || aclEntryId == null) {
        throw new Error("Missing the required parameter 'aclEntryId' when calling weaveAclEntriesUpdate");
      }


      var pathParams = {
        'deviceId': deviceId,
        'aclEntryId': aclEntryId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = AclEntry;

      return this.apiClient.callApi(
        '/devices/{deviceId}/aclEntries/{aclEntryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
