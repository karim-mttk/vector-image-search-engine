/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Command', 'model/CommandsListResponse', 'model/CommandsQueueResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Command'), require('../model/CommandsListResponse'), require('../model/CommandsQueueResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.WeaviateApi) {
      root.WeaviateApi = {};
    }
    root.WeaviateApi.CommandsApi = factory(root.WeaviateApi.ApiClient, root.WeaviateApi.Command, root.WeaviateApi.CommandsListResponse, root.WeaviateApi.CommandsQueueResponse);
  }
}(this, function(ApiClient, Command, CommandsListResponse, CommandsQueueResponse) {
  'use strict';

  /**
   * Commands service.
   * @module api/CommandsApi
   * @version v1-alpha
   */

  /**
   * Constructs a new CommandsApi. 
   * @alias module:api/CommandsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the weaveCommandsCancel operation.
     * @callback module:api/CommandsApi~weaveCommandsCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a command.
     * @param {String} commandId Command ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/CommandsApi~weaveCommandsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.weaveCommandsCancel = function(commandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'commandId' is set
      if (commandId == undefined || commandId == null) {
        throw new Error("Missing the required parameter 'commandId' when calling weaveCommandsCancel");
      }


      var pathParams = {
        'commandId': commandId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands/{commandId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsDelete operation.
     * @callback module:api/CommandsApi~weaveCommandsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a command.
     * @param {String} commandId Unique command ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/CommandsApi~weaveCommandsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.weaveCommandsDelete = function(commandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'commandId' is set
      if (commandId == undefined || commandId == null) {
        throw new Error("Missing the required parameter 'commandId' when calling weaveCommandsDelete");
      }


      var pathParams = {
        'commandId': commandId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/commands/{commandId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsGet operation.
     * @callback module:api/CommandsApi~weaveCommandsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a particular command.
     * @param {String} commandId Unique command ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.attachmentPath Path to the blob inside the command, for now only two values are supported: \&quot;parameters\&quot; and \&quot;results\&quot;.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/CommandsApi~weaveCommandsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.weaveCommandsGet = function(commandId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'commandId' is set
      if (commandId == undefined || commandId == null) {
        throw new Error("Missing the required parameter 'commandId' when calling weaveCommandsGet");
      }


      var pathParams = {
        'commandId': commandId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'attachmentPath': opts['attachmentPath'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands/{commandId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsGetQueue operation.
     * @callback module:api/CommandsApi~weaveCommandsGetQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommandsQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns queued commands that device is supposed to execute. This method may be used only by devices.
     * @param {String} deviceId Device ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {Number} opts.maxResults 
     * @param {Number} opts.startIndex 
     * @param {String} opts.token 
     * @param {module:api/CommandsApi~weaveCommandsGetQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommandsQueueResponse}
     */
    this.weaveCommandsGetQueue = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveCommandsGetQueue");
      }


      var pathParams = {
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'deviceId': deviceId,
        'hl': opts['hl'],
        'maxResults': opts['maxResults'],
        'startIndex': opts['startIndex'],
        'token': opts['token']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = CommandsQueueResponse;

      return this.apiClient.callApi(
        '/commands/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsInsert operation.
     * @callback module:api/CommandsApi~weaveCommandsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates and sends a new command.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.executeAfter ID of the command that was sent before this command. Use this to ensure the order of commands.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {String} opts.responseAwaitMs Number of milliseconds to wait for device response before returning.
     * @param {module:model/Command} opts.body 
     * @param {module:api/CommandsApi~weaveCommandsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.weaveCommandsInsert = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'executeAfter': opts['executeAfter'],
        'hl': opts['hl'],
        'responseAwaitMs': opts['responseAwaitMs']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsList operation.
     * @callback module:api/CommandsApi~weaveCommandsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommandsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all commands in reverse order of creation.
     * @param {String} deviceId Device ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.byUser List all the commands issued by the user. Special value &#39;me&#39; can be used to list by the current user.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {Number} opts.maxResults 
     * @param {Number} opts.startIndex 
     * @param {module:model/String} opts.state Command state.
     * @param {String} opts.token 
     * @param {module:api/CommandsApi~weaveCommandsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommandsListResponse}
     */
    this.weaveCommandsList = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveCommandsList");
      }


      var pathParams = {
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'deviceId': deviceId,
        'byUser': opts['byUser'],
        'hl': opts['hl'],
        'maxResults': opts['maxResults'],
        'startIndex': opts['startIndex'],
        'state': opts['state'],
        'token': opts['token']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = CommandsListResponse;

      return this.apiClient.callApi(
        '/commands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsPatch operation.
     * @callback module:api/CommandsApi~weaveCommandsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a command. This method may be used only by devices. This method supports patch semantics.
     * @param {String} commandId Unique command ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/Command} opts.body 
     * @param {module:api/CommandsApi~weaveCommandsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.weaveCommandsPatch = function(commandId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'commandId' is set
      if (commandId == undefined || commandId == null) {
        throw new Error("Missing the required parameter 'commandId' when calling weaveCommandsPatch");
      }


      var pathParams = {
        'commandId': commandId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands/{commandId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveCommandsUpdate operation.
     * @callback module:api/CommandsApi~weaveCommandsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a command. This method may be used only by devices.
     * @param {String} commandId Unique command ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/Command} opts.body 
     * @param {module:api/CommandsApi~weaveCommandsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.weaveCommandsUpdate = function(commandId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'commandId' is set
      if (commandId == undefined || commandId == null) {
        throw new Error("Missing the required parameter 'commandId' when calling weaveCommandsUpdate");
      }


      var pathParams = {
        'commandId': commandId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands/{commandId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
