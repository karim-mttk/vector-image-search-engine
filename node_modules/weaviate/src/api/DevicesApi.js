/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Device', 'model/DevicesAddLabelRequest', 'model/DevicesAddNicknameRequest', 'model/DevicesAddNicknameResponse', 'model/DevicesListResponse', 'model/DevicesPatchStateRequest', 'model/DevicesPatchStateResponse', 'model/DevicesRemoveLabelRequest', 'model/DevicesRemoveNicknameRequest', 'model/DevicesRemoveNicknameResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Device'), require('../model/DevicesAddLabelRequest'), require('../model/DevicesAddNicknameRequest'), require('../model/DevicesAddNicknameResponse'), require('../model/DevicesListResponse'), require('../model/DevicesPatchStateRequest'), require('../model/DevicesPatchStateResponse'), require('../model/DevicesRemoveLabelRequest'), require('../model/DevicesRemoveNicknameRequest'), require('../model/DevicesRemoveNicknameResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.WeaviateApi) {
      root.WeaviateApi = {};
    }
    root.WeaviateApi.DevicesApi = factory(root.WeaviateApi.ApiClient, root.WeaviateApi.Device, root.WeaviateApi.DevicesAddLabelRequest, root.WeaviateApi.DevicesAddNicknameRequest, root.WeaviateApi.DevicesAddNicknameResponse, root.WeaviateApi.DevicesListResponse, root.WeaviateApi.DevicesPatchStateRequest, root.WeaviateApi.DevicesPatchStateResponse, root.WeaviateApi.DevicesRemoveLabelRequest, root.WeaviateApi.DevicesRemoveNicknameRequest, root.WeaviateApi.DevicesRemoveNicknameResponse);
  }
}(this, function(ApiClient, Device, DevicesAddLabelRequest, DevicesAddNicknameRequest, DevicesAddNicknameResponse, DevicesListResponse, DevicesPatchStateRequest, DevicesPatchStateResponse, DevicesRemoveLabelRequest, DevicesRemoveNicknameRequest, DevicesRemoveNicknameResponse) {
  'use strict';

  /**
   * Devices service.
   * @module api/DevicesApi
   * @version v1-alpha
   */

  /**
   * Constructs a new DevicesApi. 
   * @alias module:api/DevicesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the weaveDevicesAddLabel operation.
     * @callback module:api/DevicesApi~weaveDevicesAddLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a label to the device.
     * @param {String} deviceId Device id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/DevicesAddLabelRequest} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesAddLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.weaveDevicesAddLabel = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesAddLabel");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{deviceId}/addLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesAddNickname operation.
     * @callback module:api/DevicesApi~weaveDevicesAddNicknameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesAddNicknameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a nickname to the device.
     * @param {String} deviceId Device id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/DevicesAddNicknameRequest} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesAddNicknameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesAddNicknameResponse}
     */
    this.weaveDevicesAddNickname = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesAddNickname");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = DevicesAddNicknameResponse;

      return this.apiClient.callApi(
        '/devices/{deviceId}/addNickname', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesDelete operation.
     * @callback module:api/DevicesApi~weaveDevicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device from the system.
     * @param {String} deviceId Unique ID of the device.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/DevicesApi~weaveDevicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.weaveDevicesDelete = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesDelete");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesGet operation.
     * @callback module:api/DevicesApi~weaveDevicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a particular device data.
     * @param {String} deviceId Unique ID of the device.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/String} opts.projection Projection controls which fields of the Device resource are returned.
     * @param {module:api/DevicesApi~weaveDevicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    this.weaveDevicesGet = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesGet");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl'],
        'projection': opts['projection']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Device;

      return this.apiClient.callApi(
        '/devices/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesInsert operation.
     * @callback module:api/DevicesApi~weaveDevicesInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new device. This method may be used only by aggregator devices or adapters.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.adapterActivationId ID of the adapter activation that this device belongs to, if any.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/Device} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    this.weaveDevicesInsert = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'adapterActivationId': opts['adapterActivationId'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Device;

      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesList operation.
     * @callback module:api/DevicesApi~weaveDevicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists devices user has access to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.descriptionSubstring Device description.
     * @param {module:model/String} opts.deviceKind Device kind.
     * @param {String} opts.displayNameSubstring Device display name. Deprecated, use &#39;nameSubstring&#39; instead.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {Number} opts.maxResults 
     * @param {String} opts.modelManifestId Device model manifest.
     * @param {String} opts.nameSubstring Device name.
     * @param {String} opts.placeId Device&#39;s place.
     * @param {module:model/String} opts.role Access role to the device.
     * @param {String} opts.roomId Device&#39;s room.
     * @param {Number} opts.startIndex 
     * @param {String} opts.systemNameSubstring Device system name. Deprecated, use &#39;nameSubstring&#39; instead.
     * @param {String} opts.token 
     * @param {module:api/DevicesApi~weaveDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesListResponse}
     */
    this.weaveDevicesList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'descriptionSubstring': opts['descriptionSubstring'],
        'deviceKind': opts['deviceKind'],
        'displayNameSubstring': opts['displayNameSubstring'],
        'hl': opts['hl'],
        'maxResults': opts['maxResults'],
        'modelManifestId': opts['modelManifestId'],
        'nameSubstring': opts['nameSubstring'],
        'placeId': opts['placeId'],
        'role': opts['role'],
        'roomId': opts['roomId'],
        'startIndex': opts['startIndex'],
        'systemNameSubstring': opts['systemNameSubstring'],
        'token': opts['token']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = DevicesListResponse;

      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesPatch operation.
     * @callback module:api/DevicesApi~weaveDevicesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a device data. This method supports patch semantics.
     * @param {String} deviceId Unique ID of the device.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {String} opts.lastUpdateTimeMs Previous last update time in device data. Optionally set this parameter to ensure an update call does not overwrite newer data.
     * @param {module:model/Device} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    this.weaveDevicesPatch = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesPatch");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl'],
        'lastUpdateTimeMs': opts['lastUpdateTimeMs']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Device;

      return this.apiClient.callApi(
        '/devices/{deviceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesPatchState operation.
     * @callback module:api/DevicesApi~weaveDevicesPatchStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesPatchStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies provided patches to the device state. This method may be used only by devices.
     * @param {String} deviceId Device id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/DevicesPatchStateRequest} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesPatchStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesPatchStateResponse}
     */
    this.weaveDevicesPatchState = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesPatchState");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = DevicesPatchStateResponse;

      return this.apiClient.callApi(
        '/devices/{deviceId}/patchState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesRemoveLabel operation.
     * @callback module:api/DevicesApi~weaveDevicesRemoveLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a label of the device.
     * @param {String} deviceId Device id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/DevicesRemoveLabelRequest} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesRemoveLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.weaveDevicesRemoveLabel = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesRemoveLabel");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{deviceId}/removeLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesRemoveNickname operation.
     * @callback module:api/DevicesApi~weaveDevicesRemoveNicknameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesRemoveNicknameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a nickname of the device.
     * @param {String} deviceId Device id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:model/DevicesRemoveNicknameRequest} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesRemoveNicknameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesRemoveNicknameResponse}
     */
    this.weaveDevicesRemoveNickname = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesRemoveNickname");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = DevicesRemoveNicknameResponse;

      return this.apiClient.callApi(
        '/devices/{deviceId}/removeNickname', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesUpdate operation.
     * @callback module:api/DevicesApi~weaveDevicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a device data.
     * @param {String} deviceId Unique ID of the device.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {String} opts.lastUpdateTimeMs Previous last update time in device data. Optionally set this parameter to ensure an update call does not overwrite newer data.
     * @param {module:model/Device} opts.body 
     * @param {module:api/DevicesApi~weaveDevicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    this.weaveDevicesUpdate = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesUpdate");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hl': opts['hl'],
        'lastUpdateTimeMs': opts['lastUpdateTimeMs']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = Device;

      return this.apiClient.callApi(
        '/devices/{deviceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weaveDevicesUpdateParent operation.
     * @callback module:api/DevicesApi~weaveDevicesUpdateParentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates parent of the child device. Only managers can use this method.
     * @param {String} deviceId Device ID.
     * @param {String} parentId New parent device ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.alt Data format for the response. (default to json)
     * @param {String} opts.fields Selector specifying which fields to include in a partial response.
     * @param {String} opts.key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} opts.oauthToken OAuth 2.0 token for the current user.
     * @param {Boolean} opts.prettyPrint Returns response with indentations and line breaks. (default to true)
     * @param {String} opts.quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param {String} opts.userIp IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param {String} opts.hl Specifies the language code that should be used for text values in the API response.
     * @param {module:api/DevicesApi~weaveDevicesUpdateParentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.weaveDevicesUpdateParent = function(deviceId, parentId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling weaveDevicesUpdateParent");
      }

      // verify the required parameter 'parentId' is set
      if (parentId == undefined || parentId == null) {
        throw new Error("Missing the required parameter 'parentId' when calling weaveDevicesUpdateParent");
      }


      var pathParams = {
        'deviceId': deviceId
      };
      var queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'parentId': parentId,
        'hl': opts['hl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json', 'application/protobuf', 'application/xml'];
      var accepts = ['application/json', 'application/protobuf', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{deviceId}/updateParent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
