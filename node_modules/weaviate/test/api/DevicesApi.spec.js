/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WeaviateApi);
  }
}(this, function(expect, WeaviateApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WeaviateApi.DevicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DevicesApi', function() {
    describe('weaveDevicesAddLabel', function() {
      it('should call weaveDevicesAddLabel successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesAddLabel
        //instance.weaveDevicesAddLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesAddNickname', function() {
      it('should call weaveDevicesAddNickname successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesAddNickname
        //instance.weaveDevicesAddNickname(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesDelete', function() {
      it('should call weaveDevicesDelete successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesDelete
        //instance.weaveDevicesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesGet', function() {
      it('should call weaveDevicesGet successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesGet
        //instance.weaveDevicesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesInsert', function() {
      it('should call weaveDevicesInsert successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesInsert
        //instance.weaveDevicesInsert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesList', function() {
      it('should call weaveDevicesList successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesList
        //instance.weaveDevicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesPatch', function() {
      it('should call weaveDevicesPatch successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesPatch
        //instance.weaveDevicesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesPatchState', function() {
      it('should call weaveDevicesPatchState successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesPatchState
        //instance.weaveDevicesPatchState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesRemoveLabel', function() {
      it('should call weaveDevicesRemoveLabel successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesRemoveLabel
        //instance.weaveDevicesRemoveLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesRemoveNickname', function() {
      it('should call weaveDevicesRemoveNickname successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesRemoveNickname
        //instance.weaveDevicesRemoveNickname(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesUpdate', function() {
      it('should call weaveDevicesUpdate successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesUpdate
        //instance.weaveDevicesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weaveDevicesUpdateParent', function() {
      it('should call weaveDevicesUpdateParent successfully', function(done) {
        //uncomment below and update the code to test weaveDevicesUpdateParent
        //instance.weaveDevicesUpdateParent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
