/**
 * Weaviate API
 * Lets you register, view and manage cloud ready devices.
 *
 * OpenAPI spec version: v1-alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WeaviateApi);
  }
}(this, function(expect, WeaviateApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WeaviateApi.Device();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Device', function() {
    it('should create an instance of Device', function() {
      // uncomment below and update the code to test Device
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be.a(WeaviateApi.Device);
    });

    it('should have the property adapterId (base name: "adapterId")', function() {
      // uncomment below and update the code to test the property adapterId
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property certFingerprint (base name: "certFingerprint")', function() {
      // uncomment below and update the code to test the property certFingerprint
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property commandDefs (base name: "commandDefs")', function() {
      // uncomment below and update the code to test the property commandDefs
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property components (base name: "components")', function() {
      // uncomment below and update the code to test the property components
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property connectionStatus (base name: "connectionStatus")', function() {
      // uncomment below and update the code to test the property connectionStatus
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property creationTimeMs (base name: "creationTimeMs")', function() {
      // uncomment below and update the code to test the property creationTimeMs
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property deviceKind (base name: "deviceKind")', function() {
      // uncomment below and update the code to test the property deviceKind
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property deviceLocalId (base name: "deviceLocalId")', function() {
      // uncomment below and update the code to test the property deviceLocalId
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property invitations (base name: "invitations")', function() {
      // uncomment below and update the code to test the property invitations
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property isEventRecordingDisabled (base name: "isEventRecordingDisabled")', function() {
      // uncomment below and update the code to test the property isEventRecordingDisabled
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property lastSeenTimeMs (base name: "lastSeenTimeMs")', function() {
      // uncomment below and update the code to test the property lastSeenTimeMs
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateTimeMs (base name: "lastUpdateTimeMs")', function() {
      // uncomment below and update the code to test the property lastUpdateTimeMs
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property lastUseTimeMs (base name: "lastUseTimeMs")', function() {
      // uncomment below and update the code to test the property lastUseTimeMs
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property modelManifest (base name: "modelManifest")', function() {
      // uncomment below and update the code to test the property modelManifest
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property modelManifestId (base name: "modelManifestId")', function() {
      // uncomment below and update the code to test the property modelManifestId
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property nicknames (base name: "nicknames")', function() {
      // uncomment below and update the code to test the property nicknames
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property personalizedInfo (base name: "personalizedInfo")', function() {
      // uncomment below and update the code to test the property personalizedInfo
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property placeId (base name: "placeId")', function() {
      // uncomment below and update the code to test the property placeId
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property placesHints (base name: "placesHints")', function() {
      // uncomment below and update the code to test the property placesHints
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property room (base name: "room")', function() {
      // uncomment below and update the code to test the property room
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property stateDefs (base name: "stateDefs")', function() {
      // uncomment below and update the code to test the property stateDefs
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property traits (base name: "traits")', function() {
      // uncomment below and update the code to test the property traits
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

    it('should have the property uiDeviceKind (base name: "uiDeviceKind")', function() {
      // uncomment below and update the code to test the property uiDeviceKind
      //var instane = new WeaviateApi.Device();
      //expect(instance).to.be();
    });

  });

}));
